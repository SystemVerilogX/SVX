#!/usr/intel/pkgs/perl/5.14.1-threads/bin/perl
# -*- mode: perl; indent-tabs-mode: nil; perl-indent-level: 2; cperl-indent-level: 2; -*-

# Copyright (c) 2014, Intel Corporation
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Intel Corporation nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


#
#
# Run this when all regressions produce desired results.
# This populates /regression/golden with svxpp output for all regressions.
#

use strict;
use warnings;

use FindBin ();
use lib "$FindBin::Bin";
use svx_repo_context;
&Context::init(1);

my $cmd = '';



#
# Process command-line args
#




#
# Get test attributes and iterate
#

my $golden_dir = "regression/golden";
my $regress_gen_dir = "run/gen";


# Ensure that $regress_gen_dir contains only dirs for regression tests.
foreach my $test_dir (`cd $regress_gen_dir; ls`) {
  chomp($test_dir);
  exists $Context::tests{$test_dir} or die "Directory $test_dir does not correspond to a test.  make_regress_all should clean this directory.";
}



# Remove $golden_dir.
$cmd = "rm -rf $golden_dir";
(!-e $golden_dir) or !system($cmd) or die "Failed to rmdir $golden_dir";

# Copy $regress_gen_dir to $golden_dir
$cmd = "cp -r $regress_gen_dir $golden_dir";
!system($cmd) or die "$cmd failed.";


# Currently no need to go test-by-test.
#foreach my $test_name (keys %Context::tests) {
#
#  my $test_info = &Context::get_test($test_name);
#  my $vx_files = $$test_info{vx};
#
#
#  #
#  # update golden for this test.
#  #
#
#  my $test_dir = "run/gen/$test_name";
#  my $golden_test_dir = "regression/golden/$test_name";
#  (-e $test_dir) or die "Cound't find: $test_dir";
#  unlink($golden_test_dir) or die "Failed to delete $golden_test_dir";
#  $cmd = "cp -r $test_dir $golden_test_dir";
#  !system($cmd) or die "Failed to: $cmd";
#
#  #foreach my $vx (@$vx_files) {
#  #  (-e "$vx") or die "Bug: Can't find $vx.";
#  #}
#}


exit(0);
